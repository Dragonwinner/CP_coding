{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOLaTwmSxKx4VwxhV5UvUxM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dragonwinner/CP_coding/blob/main/KosarajAlgorithm_cpp.cpp\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XQvnF5OeH17f"
      },
      "outputs": [],
      "source": [
        "#include<bits/stdc++.h>\n",
        "#include<iostream>\n",
        "#include<stack>\n",
        "#include<list>\n",
        "\n",
        "using namespace std;\n",
        "\n",
        "class Graph{\n",
        "    int V;\n",
        "    list<int> *adj;\n",
        "    void fillOrder(int V, bool visited[],stack<int> &Stack);\n",
        "    void DFSUtil(int v, bool visited[]);\n",
        "    \n",
        "    public:\n",
        "    Graph(int V);\n",
        "    void addEdge(int v, int w);\n",
        "    \n",
        "    void printSCCs();\n",
        "    \n",
        "    Graph getTranspose();\n",
        "          \n",
        "};\n",
        "Graph::Graph(int V){\n",
        "    this->V=V;\n",
        "    adj = new list<int>[V];\n",
        "}\n",
        "void Graph::addEdge(int v,int w){\n",
        "    adj[v].push_back(w);\n",
        "    \n",
        "}\n",
        "void Graph::fillOrder(int V,bool visited[],stack<int>& Stack){\n",
        "    visited[V]=true;\n",
        "    list<int>::iterator i;\n",
        "    for(i=adj[V].begin();i!=adj[V].end();++i){\n",
        "        if(!visited[*i])\n",
        "           fillOrder(*i,visited,Stack);\n",
        "    }\n",
        "    Stack.push(V);\n",
        "}\n",
        "Graph Graph::getTranspose(){\n",
        "    Graph g(V);\n",
        "    for(int v=0;v<V;v++){\n",
        "        \n",
        "    \n",
        "    list<int>::iterator i;\n",
        "    for(i=adj[v].begin();i!=adj[v].end();++i){\n",
        "        g.adj[*i].push_back(v);\n",
        "    }\n",
        "    }\n",
        "    return g;\n",
        "}\n",
        "void Graph::DFSUtil(int V,bool visited[]){\n",
        "    visited[V]=true;\n",
        "    cout<<V<<\" \";\n",
        "    list<int>::iterator i;\n",
        "    for(i=adj[V].begin(); i!=adj[V].end();++i){\n",
        "        if(!visited[*i]){\n",
        "            DFSUtil(*i,visited);\n",
        "        }\n",
        "    }\n",
        "}\n",
        "void Graph::printSCCs(){\n",
        "    stack<int>s;\n",
        "    bool *visited=new bool[V];\n",
        "    for(int i=0;i<V;i++){\n",
        "        visited[i]=false;\n",
        "    }\n",
        "    for(int i=0;i<V;i++){\n",
        "        if(visited[i]==false)\n",
        "           fillOrder(i,visited,s);\n",
        "    }\n",
        "    \n",
        "    Graph gr=getTranspose();\n",
        "    \n",
        "    for(int i=0;i<V;i++){\n",
        "        visited[i]=false;\n",
        "    }\n",
        "    while(s.empty()==false){\n",
        "        int v=s.top();\n",
        "        s.pop();\n",
        "        \n",
        "        if(visited[v]==false){\n",
        "            gr.DFSUtil(v,visited);\n",
        "            cout<<endl;\n",
        "        }\n",
        "    }\n",
        "}\n",
        "\n",
        "\n",
        "int main(){\n",
        "    \n",
        "    \n",
        "    Graph g(5);\n",
        "    g.addEdge(1, 0); \n",
        "\tg.addEdge(0, 2); \n",
        "\tg.addEdge(2, 1); \n",
        "\tg.addEdge(0, 3); \n",
        "\tg.addEdge(3, 4); \n",
        "\tcout << \"Following are strongly connected components in given graph \\n\"; \n",
        "\tg.printSCCs(); \n",
        "\n",
        "\treturn 0; \n",
        "    \n",
        "    \n",
        "}"
      ]
    }
  ]
}